@model Postworthy.Web.Bot.Models.DashboardModel

@{
    var Keywords = Model.KeywordsWithOccurrenceCount.Select(x => x.Key.ToLower());
}

@Html.Partial("_TopMenu")

<div class="container-fluid">
    <div class="row-fluid">
        <div class="span12" id="content">
            <div class="block">
                <div class="navbar navbar-inner block-header">
                    <div class="muted pull-left">Bot Details</div>
                    <div class="pull-right">
                        <a class="badge badge-info" href="#" onclick="rotateRows()">next</a>
                    </div>
                </div>
                <div class="block-content collapse in">
                    <div class="row-fluid row1">
                        <div class="thumbnail span3 centered brightorange dashboardWidget" data-squared="height" data-squared-max="200">
                            <div class="thumbnail-bg translucent lower-right" data-squared="width" data-squared-percent="1.375" style="background-image:url('@Url.Content("~/content/assets/images/power.png")')"></div>
                            <div data-squared="content">
                                <h4>Up Time (Days)</h4>
                                <div class="xx">
                                    <b>@Model.UpTime</b>
                                </div>
                            </div>
                        </div>
                        <div class="thumbnail span3 centered darkblue dashboardWidget" data-squared="height" data-squared-max="200">
                            <div class="thumbnail-bg translucent lower-right" data-squared="width" data-squared-percent="1.375" style="background-image:url('@Url.Content("~/content/assets/images/meninblack.png")')"></div>
                            <div data-squared="content">
                                <h4>Following Count</h4>
                                <div class="xx">
                                    <b>@Model.FollowingCount</b>
                                </div>
                            </div>
                        </div>
                        <div class="thumbnail span3 centered brightgreen dashboardWidget" data-squared="height" data-squared-max="200">
                            <div class="thumbnail-bg translucent lower-right" data-squared="width" data-squared-percent="1.375" style="background-image:url('@Url.Content("~/content/assets/images/meninblack.png")')"></div>
                            <div data-squared="content">
                                <h4>Follower Count</h4>
                                <div class="xx">
                                    <b>@Model.FollowerCount</b>
                                </div>
                            </div>
                        </div>
                        <div class="thumbnail span3 centered brightred dashboardWidget" data-squared="height" data-squared-max="200">
                            <div class="thumbnail-bg translucent lower-right" data-squared="width" data-squared-percent="1.375" style="background-image:url('@Url.Content("~/content/assets/images/megaphone.png")')"></div>
                            <div data-squared="content">
                                <h4>Current Clout</h4>
                                <div class="xx">
                                    <b>@Model.CurrentClout</b>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row-fluid row2">
                        <div class="thumbnail span3 centered brightorange dashboardWidget" data-squared="height" data-squared-max="200">
                            <div class="thumbnail-bg translucent chart" data-squared="centered" data-percent="@(100 * (Model.TweetsPerHour / Model.TweetsPerHourMax))"></div>
                            <div data-squared="content">
                                <h4>Tweets / Hour</h4>
                                <div class="xx">
                                    <b>@(Model.TweetsPerHour.ToString("0.00"))</b>
                                </div>
                            </div>
                        </div>
                        <div class="thumbnail span3 centered brightred dashboardWidget" data-squared="height" data-squared-max="200">
                            <div class="thumbnail-bg translucent bars" data-squared="centered"></div>
                            <a data-squared="content" href='@(Url.Action("Tweets", "Dashboard") + "#tweeted")'>
                                <h4>Tweets</h4>
                                <div class="xx">
                                    <b>@Model.Tweeted.Count</b>
                                </div>
                            </a>
                        </div>
                        <div class="thumbnail span3 centered darkblue dashboardWidget" data-squared="height" data-squared-max="200">
                            <div class="thumbnail-bg translucent lower-right" data-squared="width" data-squared-percent="1.375" style="background-image:url('@Url.Content("~/content/assets/images/twitterbird.png")')"></div>
                            <a data-squared="content" href='@(Url.Action("Tweets", "Dashboard") + "#tweets")'>
                                <h4>Potential Tweets</h4>
                                <div class="xx">
                                    <b>@Model.PotentialTweets.Count</b>
                                </div>
                            </a>
                        </div>
                        <div class="thumbnail span3 centered brightgreen dashboardWidget" data-squared="height" data-squared-max="200">
                            <div class="thumbnail-bg translucent lower-right" data-squared="width" data-squared-percent="1.375" style="background-image:url('@Url.Content("~/content/assets/images/twitterbird-rt.png")')"></div>
                            <a data-squared="content" href='@(Url.Action("Tweets", "Dashboard") + "#retweets")'>
                                <h4>Potential Retweets</h4>
                                <div class="xx">
                                    <b>@Model.PotentialReTweets.Count</b>
                                </div>
                            </a>
                        </div>

                        <div class="clearfix">
                        </div>

                    </div>
                </div>
            </div>
            <div class="block">
                <div class="navbar navbar-inner block-header">
                    <div class="muted pull-left">Tweets</div>
                    <div class="pull-right">
                        <a class="badge badge-warning" href='@(Url.Action("Tweets", "Dashboard") + "#tweeted")'>View More</a>
                    </div>
                </div>
                <div class="block-content collapse in">
                    <div class="row-fluid">
                        @foreach (var item in Model.Tweeted.Reverse<Postworthy.Models.Twitter.Tweet>().Take(4))
                        {
                            <div class="thumbnail span3 centered lightblue dashboardWidget" data-squared="height" data-squared-max="200">
                                <style type="text/css">
                                    .@(item.UniqueKey) {
                                        background-image: url('@item.User.ProfileImageUrl.Replace("_normal", "_bigger")');
                                    }
                                </style>
                                <div class="@(item.UniqueKey) thumbnail-bg semi-translucent fill lower-right rounded"></div>
                                <div data-squared="content">
                                    <h4>@Html.Raw(item.TweetText)</h4>
                                    <div class='xx'>@item.RetweetCount</div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
            @if (Model.TopFriendTweetCounts.Count > 0)
            {
            <div class="block">
                    <div class="navbar navbar-inner block-header">
                        <div class="muted pull-left">Friends</div>
                        <div class="pull-right">
                            <span class="badge badge-warning">View More</span>
                        </div>
                    </div>
                    <div class="block-content collapse in">
                        <div class="row-fluid">
                            @foreach (var group in Model.TopFriendTweetCounts
                            .OrderByDescending(x => x.Value)
                            .Take(6)
                            .Select((x, i) => new { index = i, value = x })
                            .GroupBy(x => x.index / 6)
                            )
                            {
                                <div class="row-fluid group@(group.Key)" style="margin-bottom:21px;">
                                    @foreach (var groupItem in group)
                                    {
                                        var item = groupItem.value;
                            
                                        <div class="thumbnail span2 centered" @Html.Raw(item.Key.Type == Postworthy.Models.Twitter.Tweep.TweepType.Target ? "style=\"font-weight:bold;background-color: #ff2413;\"" : "") data-squared="height" data-squared-max="200">
                                            <div class="@(item.Key.UniqueKey) thumbnail-bg semi-translucent fill"></div>
                                            <a data-squared="content" href="http://twitter.com/@(item.Key.ScreenName)" target="_blank" style="color: rgba(0, 0, 0, 0.9);">
                                                <h4>@item.Key.ScreenName</h4>
                                                <div class='xx'>@item.Value</div>
                                            </a>
                                            <style type="text/css">
                                            .@(item.Key.UniqueKey) {
                                                background-image: url('@item.Key.User.ProfileImageUrl.Replace("_normal", "")');
                                            }
                                        </style>
                                        </div>
                            
                                    }
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }
            @if (Model.PotentialFriendRequests.Count > 0)
            {
                <div class="block">
                    <div class="navbar navbar-inner block-header">
                        <div class="muted pull-left">Potential Friends</div>
                        <div class="pull-right">
                            <a class="badge badge-warning" href='@(Url.Action("PotentialFriends", "Dashboard"))'>View More</a>
                        </div>
                    </div>
                    <div class="block-content collapse in">
                        <div class="row-fluid">
                            @foreach (var group in Model.PotentialFriendRequests
                            .Where(x => x.Key.Type != Postworthy.Models.Twitter.Tweep.TweepType.Ignore)
                            .OrderByDescending(x => Keywords.Count(y => (x.Key.User.Description ?? "").ToLower().Contains(y)))
                            .ThenByDescending(x => x.Key.Clout())
                            .Take(Model.TwitterFollowSuggestions.Count == 0 ? 12 : 6)
                            .Select((x, i) => new { index = i, value = x })
                            .GroupBy(x => x.index / 6)
                            )
                            {
                                <div class="row-fluid group@(group.Key)" style="margin-bottom:21px;">
                                    @foreach (var groupItem in group)
                                    {
                                        var item = groupItem.value;
                            
                                        <div class="thumbnail span2 centered" @Html.Raw(item.Key.Type == Postworthy.Models.Twitter.Tweep.TweepType.Target ? "style=\"font-weight:bold;background-color: #ff2413;\"" : "") data-squared="height" data-squared-max="200">
                                            <div class="@(item.Key.UniqueKey) thumbnail-bg semi-translucent fill"></div>
                                            <a data-squared="content" href="http://twitter.com/@(item.Key.ScreenName)" target="_blank" style="color: rgba(0, 0, 0, 0.9);">
                                                <h4>@item.Key.ScreenName</h4>
                                            </a>
                                            <style type="text/css">
                                            .@(item.Key.UniqueKey) {
                                                background-image: url('@item.Key.User.ProfileImageUrl.Replace("_normal", "")');
                                            }
                                        </style>
                                        </div>
                            
                                    }
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }
            @if (Model.TwitterFollowSuggestions.Count > 0)
            {
                <div class="block">
                    <div class="navbar navbar-inner block-header">
                        <div class="muted pull-left">Twitter Suggested Friends</div>
                        <div class="pull-right">
                            <a class="badge badge-warning" href='@(Url.Action("SuggestedFriends", "Dashboard"))'>View More</a>
                        </div>
                    </div>
                    <div class="block-content collapse in">
                        <div class="row-fluid">
                            @foreach (var group in Model.TwitterFollowSuggestions
                            .OrderByDescending(x => Keywords.Count(y => (x.User.Description ?? "").ToLower().Contains(y)))
                            .ThenByDescending(x => x.Clout())
                            .Take(Model.PotentialFriendRequests.Count == 0 ? 12 : 6)
                            .Select((x, i) => new { index = i, value = x })
                            .GroupBy(x => x.index / 6)
                            )
                            {
                                <div class="row-fluid group@(group.Key)" style="margin-bottom:21px;">
                                    @foreach (var groupItem in group)
                                    {
                                        var item = groupItem.value;
                            
                                        <div class="thumbnail span2 centered" @Html.Raw(item.Type == Postworthy.Models.Twitter.Tweep.TweepType.Target ? "style=\"font-weight:bold;background-color: #ff2413;\"" : "") data-squared="height" data-squared-max="200">
                                            <div class="@(item.UniqueKey) thumbnail-bg semi-translucent fill"></div>
                                            <a data-squared="content" href="http://twitter.com/@(item.ScreenName)" target="_blank" style="color: rgba(0, 0, 0, 0.9);">
                                                <h4>@item.ScreenName</h4>
                                            </a>
                                            <style type="text/css">
                                            .@(item.UniqueKey) {
                                                background-image: url('@item.User.ProfileImageUrl.Replace("_normal", "")');
                                            }
                                        </style>
                                        </div>
                            
                                    }
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }
            <div class="block">
                <div class="span6">
                    <!-- block -->
                    <div class="block">
                        <div class="navbar navbar-inner block-header">
                            <div class="muted pull-left">Keywords</div>
                            <div class="pull-right">
                                <span class="badge badge-info">@Model.KeywordsWithOccurrenceCount.Sum(x => x.Value)</span>
                            </div>
                        </div>
                        <div class="block-content collapse in">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th>#</th>
                                        <th>Word</th>
                                        <th>Occurrence Count</th>
                                        <th></th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr>
                                        <td>*</td>
                                        <td>
                                            <input type="text" style="width: 90%" id="txtNewKeyword" />
                                        </td>
                                        <td>-</td>
                                        <td>
                                            <div class="btn btn-success btn-mini" style="width: 50px" id="btnNewKeyword">Add New</div>
                                        </td>
                                    </tr>
                                    @{ int idx = 0;}
                                    @foreach (var item in Model.KeywordsWithOccurrenceCount)
                                    {
                                        idx++;
                                        var isSeeded = Model.SeededKeywords.Contains(item.Key);
                                        var isPendingIgnore = Model.PendingKeywordIgnore.Contains(item.Key);
                                        <tr style="@(isSeeded ? "font-weight:bold; color:#51a351;" : "")">
                                            <td>@idx</td>
                                            <td>@item.Key</td>
                                            <td>@item.Value</td>
                                            <td>
                                                @if (!isSeeded)
                                                {
                                                    var dataRemove = isPendingIgnore ? "" : "data-remove-keyword='" + item.Key + "'";
                                                    var text = isPendingIgnore ? "Pending" : "Remove";
                                                    <div class="btn btn-warning btn-mini" style="width:50px" @Html.Raw(dataRemove)>@text</div>
                                                }
                                            </td>
                                        </tr>
                                    }
                                    @foreach (var item in Model.PendingKeywordAdd)
                                    {
                                        idx++;
                                        var count = Model.PotentialKeywordsWithOccurrenceCount.Where(x => x.Key == item).Select(x => x.Value).FirstOrDefault();
                                        
                                        <tr>
                                            <td>@idx</td>
                                            <td>@item</td>
                                            <td>@count</td>
                                            <td>
                                                <div class="btn btn-warning btn-mini" style="width: 50px">Pending</div>
                                            </td>
                                        </tr>
                                    }

                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
                <div class="span6">
                    <div class="block">
                        <div class="navbar navbar-inner block-header">
                            <div class="muted pull-left">Keyword Suggestions</div>
                            <div class="pull-right">
                                <span class="badge badge-info">@Model.PotentialKeywordsWithOccurrenceCount.Sum(x => x.Value)</span>
                            </div>
                        </div>
                        <div class="block-content collapse in">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th>#</th>
                                        <th>Word</th>
                                        <th>Occurrence Count</th>
                                        <th></th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @{ int idx2 = 0;}
                                    @foreach (var item in Model.PotentialKeywordsWithOccurrenceCount)
                                    {
                                        if (!Model.PendingKeywordAdd.Contains(item.Key))
                                        {
                                            idx2++;
                                        <tr>
                                            <td>@idx2</td>
                                            <td>@item.Key</td>
                                            <td>@item.Value</td>
                                            <td>
                                                <div class="btn btn-success btn-mini" style="width:50px" data-add-keyword="@item.Key">Add</div>
                                            </td>
                                        </tr>
                                        }
                                    }
                                </tbody>
                            </table>
                        </div>

                    </div>
                </div>
            </div>
        </div>
        <!-- /block -->
    </div>
</div>

@section scripts {

    @Scripts.Render("~/bundles/charts")

    @Scripts.Render("~/bundles/squaredup")

    <script type="text/javascript">
        $(function () {
            $(".row2").hide();
            setInterval(rotateRows, 30000);

            $('.thumbnail-bg.chart').easyPieChart({ animate: 1000, size: 200 });

            $(".thumbnail-bg.bars").sparkline([@(string.Join(",", Model.TweetsLastThirtyDays))], {
                type: 'bar',
                chartRangeMin: 0,
                chartRangeMax: @(Model.TweetsLastThirtyDays.Max() * 2),
                height: '150',
                barWidth: 6,
                barColor: '#cccccc',
                negBarColor: '#a8a6a6',
                zeroColor: '#a8a6a6',
                nullColor: '#a8a6a6'
            });

            $("[data-remove-keyword]").on("click",function(evt){ 
                var target = $(evt.target);
                var keyword = target.attr("data-remove-keyword");
                target.removeAttr("data-remove-keyword");
                target.text("Pending");

                $.ajax({
                    url: "@Url.Action("IgnoreKeyword", "BotCommand")/" + encodeURI(keyword),
                }).done(function() {
                }).fail(function() { 
                    target.attr("data-remove-keyword",keyword);
                    target.text("Remove");
                });
            });
            $("[data-add-keyword]").on("click",function(evt){ 
                var target = $(evt.target);
                var keyword = target.attr("data-add-keyword");
                target.removeAttr("data-add-keyword");
                target.text("Pending");

                $.ajax({
                    url: "@Url.Action("AddKeyword", "BotCommand")/" + encodeURI(keyword),
                }).done(function() {
                }).fail(function() { 
                    target.attr("data-add-keyword",keyword);
                    target.text("Add");
                });
            });
            $("#btnNewKeyword").on("click",function(evt){ 
                var target = $(evt.target);
                var keyword = $("#txtNewKeyword").val();

                if(keyword.length >= 3)
                {
                    $.ajax({
                        url: "@Url.Action("AddKeyword", "BotCommand")/" + encodeURI(keyword),
                    }).done(function() {
                        $("#txtNewKeyword").val("");
                        var nextIndex = target.closest("tbody").children().length
                        var newRow = $("<tr><td>" + nextIndex + "</td><td>" + keyword + "</td><td>-</td><td><div class='btn btn-warning btn-mini' style='width:50px'>Pending</div></td></tr>");
                        target.closest("tbody").append(newRow);
                    }).fail(function() { 
                        $("#txtNewKeyword").val("");
                    });
                }
            });
        });

        function rotateRows() {
            var show = $(".row2").is(":hidden") ? $(".row2") : $(".row1");
            var hide = $(".row2").is(":hidden") ? $(".row1") : $(".row2");
            hide.fadeOut(1000, function () { show.fadeIn(1000, function(){ squaredUp.squareUp(show);}); });
        }
    </script>

}